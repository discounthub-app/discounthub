name: CI

on:
  push:
    branches: [ main, develop, ci/** ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  backend:
    name: Backend (tests)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: discounthub_test
          POSTGRES_USER: discounthub
          POSTGRES_PASSWORD: discounthub
        ports:
          - 5432:5432

    env:
      # Pydantic Settings (DB)
      postgres_db: discounthub_test
      postgres_user: discounthub
      postgres_password: discounthub
      postgres_host: localhost
      postgres_port: "5432"

      # SQLAlchemy URL (прямое подключение)
      DATABASE_URL: postgresql+psycopg2://discounthub:discounthub@localhost:5432/discounthub_test

      # Auth/прочие настройки для тестов
      SECRET_KEY: "insecure-test-secret-change-me"
      ALGORITHM: "HS256"
      ACCESS_TOKEN_EXPIRE_MINUTES: "60"

      PYTHONUNBUFFERED: "1"
      PYTHONPATH: ${{ github.workspace }}/backend
      TESTING: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev

      - name: Install Python deps
        working-directory: backend
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Wait for Postgres
        env:
          PGPASSWORD: discounthub
        run: |
          for i in {1..60}; do
            if pg_isready -h localhost -p 5432 -U discounthub -d discounthub_test; then
              echo "Postgres is ready"; exit 0
            fi
            echo "Waiting for Postgres ($i/60)..."; sleep 2
          done
          echo "Postgres is not ready in time"; exit 1

      # В тестовой БД гарантированно пересоздаём схему по актуальным моделям
      - name: Reset DB schema from models (drop_all + create_all)
        working-directory: backend
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
        run: |
          python -c "import app.models.user as _models; \
          from app.db import Base, engine; \
          print('Dropping all tables...'); \
          Base.metadata.drop_all(bind=engine); \
          print('Creating all tables from models...'); \
          Base.metadata.create_all(bind=engine); \
          print('DB schema reset complete.')"

      - name: Run tests
        working-directory: backend
        run: pytest -q

  frontend:
    name: Frontend (install & build)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install deps
        working-directory: frontend
        run: |
          npm install --no-audit --no-fund

      - name: Build (optional)
        working-directory: frontend
        run: |
          npm run -s build || echo "No build script, skipping"
